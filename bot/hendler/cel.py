from aiogram import Router, F, types
from keyboard.keyboards import  cel_create, inl_cel, menu
from fetchs.connect import  login, cel_list, create_cel, create_comment, destroy_cel
from aiogram.fsm.context import FSMContext
from states.state import Cel, Comment
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


cel = Router()

#cb


@cel.callback_query(F.data.startswith('comment_'))
async def add_comment(cb:types.CallbackQuery, state:FSMContext):
    id = cb.data.split('_')[-1]
    c = cb.message.text.split('"')
    await state.update_data(id=id)
    await state.set_state(Comment.body)
    
    await cb.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ü–µ–ª–∏')
    await cb.message.answer(f'–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –¥–ª—è  –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - "{c[1]}" –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è üìù',
                             reply_markup=types.ReplyKeyboardRemove())

@cel.callback_query(F.data.startswith('delete_cel_'))
async def del_cel(cb:types.CallbackQuery):
    await cb.answer('–£–¥–∞–ª—è–µ–º —Ü–µ–ª—å ')
    id = cb.data.split('_')[-1]
    
    c = cb.message.text.split('"')
    dt = {
        "username": str(cb.from_user.id),
        "password": str(cb.from_user.id)
        }
    access_token = await login(dt)
    res = await destroy_cel(id,access_token)
    
    await cb.message.answer(f'–¶–µ–ª—å - "{c[1]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=menu)
    

#–¶–µ–ª–∏
@cel.message(F.text=='üéØ –¶–µ–ª–∏')
async def key_cel(message:types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é üëá', reply_markup=cel_create)


@cel.message(F.text=='–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å')
async def cr_cel(message:types.Message, state:FSMContext):
    await state.set_state(Cel.cel_state)
    await message.answer('–°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ª—å üéØ - –Ω–∞–ø–∏—à–∏—Ç–µ  –≤–∞—à—É —Ü–µ–ª—å', reply_markup=types.ReplyKeyboardRemove())




@cel.message(F.text=='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π')
async def start_cel(message:types.Message, state:FSMContext):
    dt = {
        "username": str(message.from_user.id),
        "password": str(message.from_user.id)
        }
    access_token = await login(dt)
    res = await cel_list(access_token) 
    if res['results']:
        for cel in res['results']:                   
            await message.answer(f'''–í–∞—à–∞ —Ü–µ–ª—å - "{cel['name']}": 
                                {', '.join(cel['comment'])} ''',
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üéØ –¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞(—É–¥–∞–ª—è–µ–º)', callback_data=f'''delete_cel_{cel["id"]}'''),
     InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù', callback_data=f'''comment_{cel["id"]}'''),]
]))  
    else:
        await state.set_state(Cel.cel_state)
        await message.answer('–°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ª—å - –Ω–∞–ø–∏—à–∏—Ç–µ  –≤–∞—à—É —Ü–µ–ª—å üéØ ' , reply_markup=types.ReplyKeyboardRemove())

  
@cel.message(Cel.cel_state)
async def cel_creat(message:types.Message, state:FSMContext):
    name = message.text
    await state.clear()
    dt = {
        "username": str(message.from_user.id),
        "password": str(message.from_user.id)
        }
    access_token = await login(dt)
    res = await create_cel({'name': name}, access_token)
    await message.answer(f'''–í—ã —Å–æ–∑–¥–∞–ª–∏ —Ü–µ–ª—å üéØ - {name} 
    –í—ã–±–∏—Ä–µ—Ç–µ –∏–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ üëá''', reply_markup=cel_create)



@cel.message(Comment.body)
async def comment(message:types.Message, state:FSMContext):
    body = message.text
    await state.update_data(body=body)
    data = await state.get_data()
    print(data)
    await state.clear()
    dt = {
        "username": str(message.from_user.id),
        "password": str(message.from_user.id)
        }
    access_token = await login(dt)
    res = await create_comment({'body': data['body'], 'cel':data['id']}, access_token)
    
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é üëá', reply_markup=cel_create)



